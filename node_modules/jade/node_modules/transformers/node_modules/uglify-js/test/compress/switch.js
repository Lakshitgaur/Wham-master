{
    options = {dead_code: true, evaluate: true};
    {
        switch (1 + 1) {
            case 1:
                foo();
                break;
            case 1 + 1:
                bar();
                break;
            case 1 + 1 + 1:
                baz();
                break;
        }
    }
    {
        bar();
    }
}

{
    options = {dead_code: true, evaluate: true};
    {
        switch (1) {
            case 1:
                foo();
            case 1 + 1:
                bar();
                break;
            case 1 + 1 + 1:
                baz();
        }
    }
    {
        foo();
        bar();
    }
}

{
    options = {dead_code: true, evaluate: true};
    {
        switch (10) {
            case 1:
                foo();
            case 1 + 1:
                bar();
                break;
            case 1 + 1 + 1:
                baz();
            default:
                def();
        }
    }
    {
        def();
    }
}

{
    options = {dead_code: true, evaluate: true};
    {
        switch (2) {
            case 1:
                x();
                if (foo) break;
                y();
                break;
            case 1 + 1:
                bar();
            default:
                def();
        }
    }
    {
        bar();
        def();
    }
}

{
    options = {dead_code: true, evaluate: true};
    {
        switch (1) {
            case 1:
                x();
                if (foo) break;
                y();
                break;
            case 1 + 1:
                bar();
            default:
                def();
        }
    }
    {
        // the break inside the if ruins our job
        // we can still get rid of irrelevant cases.
        switch (1) {
            case 1:
                x();
                if (foo) break;
                y();
        }
        // XXX: we could optimize this better by inventing an outer
        // labeled block, but that's kinda tricky.
    }
}

{
    options = {dead_code: true, evaluate: true};
    {
        OUT: {
            foo();
            switch (1) {
                case 1:
                    x();
                    if (foo) break OUT;
                    y();
                case 1 + 1:
                    bar();
                    break;
                default:
                    def();
            }
        }
    }
    {
        OUT: {
            foo();
            x();
            if (foo) break OUT;
            y();
            bar();
        }
    }
}

{
    options = {dead_code: true, evaluate: true};
    {
        OUT: {
            foo();
            switch (1) {
                case 1:
                    x();
                    if (foo) break OUT;
                    for (var x = 0; x < 10; x++) {
                        if (x > 5) break; // this break refers to the for, not to the switch; thus it
                                          // shouldn't ruin our optimization
                        console.log(x);
                    }
                    y();
                case 1 + 1:
                    bar();
                    break;
                default:
                    def();
            }
        }
    }
    {
        OUT: {
            foo();
            x();
            if (foo) break OUT;
            for (var x = 0; x < 10; x++) {
                if (x > 5) break;
                console.log(x);
            }
            y();
            bar();
        }
    }
}

{
    options = {dead_code: true, evaluate: true};
    {
        OUT: switch (1) {
            case 1:
                x();
                for (; ;) break OUT;
                y();
                break;
            case 1 + 1:
                bar();
            default:
                def();
        }
    }
    {
        OUT: {
            x();
            for (; ;) break OUT;
            y();
        }
    }
}

{
    options = {dead_code: true, evaluate: true};
    {
        OUT: switch (1) {
            case 1:
                x();
                for (; ;) if (foo) break OUT;
                y();
            case 1 + 1:
                bar();
            default:
                def();
        }
    }
    {
        OUT: {
            x();
            for (; ;) if (foo) break OUT;
            y();
            bar();
            def();
        }
    }
}
